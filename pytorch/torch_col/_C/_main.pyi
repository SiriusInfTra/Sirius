# defined in torch_col/cython/main.pyx
from typing import Optional

def is_configured() -> bool: ...

def is_enable_shared_tensor() -> bool: ...

def is_enable_dynamic_sm_partition() -> bool: ...

def is_enable_xsched() -> bool: ...

def get_colocate_ctrl_hook_mode() -> ColocateCtrlHookMode: ...

def get_colocate_train_mode() -> TrainMode: ...

def is_release_interm_memory_v1() -> bool: ...

def is_release_interm_memory_v2() -> bool: ...

def disable_release_interm_memory(): ...

def disable_fbward_hook(): ...

def is_enable_fbward_hook() -> bool: ...

def torch_col_init(train_rank: int = 0, train_world_size: int = 1): ...

def get_train_rank() -> int: ...

def set_train_rank(rank): ...

def get_train_world_size() -> int: ...

def set_train_world_size(world_size): ...

def set_train_rank_world_size(rank, world_size): ...

def has_colocated_infer_server() -> bool: ...

def get_train_profile_log_path() -> str: ...

def get_unix_timestamp_us() -> int: ...

def init_train_info(init_batch_size: int, global_batch_size: int, 
                    model_name: Optional[str] = None, pid = None): ...

class ColocateCtrlHookMode:
    NONE = ...
    SYNC = ...
    XSCHED_SYNC = ...
    XSCHED_SYNC2 = ...
    def use_xsched(self) -> bool: ...


class TrainMode:
    NORMAL = ...
    COLOCATE_L1 = ...
    COLOCATE_L2 = ...
    TASKSWITCH_L0 = ...
    TASKSWITCH_L1 = ...
    TASKSWITCH_L2 = ...
    TASKSWITCH_L3 = ...
    
    def is_normal(self) -> bool: ...
    def is_colocate(self) -> bool: ...
    def is_kill_batch(self) -> bool: ...
    def is_taskswitch(self) -> bool: ...


class PyDummyStub:
    def train_start(self): ...
    def train_end(self): ...
    def stop(self): ...
    def can_exit_after_infer_worklaod_done(self) -> bool: ...


class PySwitchStub:
    def train_start(self): ...
    def train_end(self): ...
    def stop(self): ...
    def can_exit_after_infer_worklaod_done(self) -> bool: ...

    @property
    def cmd(self): ...

    def try_interrupt_train_done(self): ...


class PyColocateStub:
    def train_start(self): ...
    def train_end(self): ...
    def stop(self): ...
    def can_exit_after_infer_worklaod_done(self) -> bool: ...
    def set_killed_batch_recover(self): ...
    def set_killed_batch_reconfiged(self): ...

    @property
    def cmd(self): ...
    @property
    def target_batch_size(self): ...
    @property
    def unpub_target_batch_size(self): ...

    def adjust_l1_done(self): ...
    def adjust_l2_done(self): ...
